package com.array.controller;

import java.util.Random;
import java.util.Scanner;

public class ArrayController {
	public void basicArray() {
		//배열 선언과 할당하기
		int[] intArr = null; // 배열변수선언
		char[] charArr = null; //문자배열선언
//		System.out.println(intArr);
//		System.out.println(charArr);
		//배열변수를 활용하려면 할당을 해야함.
		intArr = new int[3];
		charArr = new char[5];
		System.out.println(intArr);
		System.out.println(charArr);
		
		double[] darr = new double[10];
		System.out.println(darr);
		
		//배열은 인덱스를 기준으로 배열변수의 값을 가져올 수 있다.
		//인덱스로 변수를 불러와 값대입하기.
		intArr[0] = 19;
		intArr[1] = 20;
		intArr[2] = 30;
		
		//intArr[2] = 3.14;  //배열은 같은 타입의 자료만 값대입 가능.
		//배열부여된 인덱스를 초과해서 대입하면
		//intArr[3] = 40;
		//code error  compile error
		//실행시 error는 runtime error
		
		//배열에 있는 값 출력하기
		int a = 10;
		System.out.println(a);
		System.out.println(intArr[0]);
		System.out.println(intArr[1]);
		System.out.println(intArr[2]);
		System.out.println(intArr.length);
		
		//이름 4개 저장공간을 확보하고 -> 배열사용
		//유인영, 유인나, 유지태, 유재석을 저장하고 출력하기
		String[] name = {"유인영", "유인나", "유지태", "유재석"};
		System.out.println(name[0]);
		System.out.println(name[1]);
		System.out.println(name[2]);
		System.out.println(name[3]);
		
		System.out.println();
		
		String[] names = new String[4];
		names[0] = "유병승"; 
		names[1] = "유지훈"; 
		names[2] = "김기영"; 
		names[3] = "노가람"; 
		System.out.println(names[0]);
		System.out.println(names[1]);
		System.out.println(names[2]);
		System.out.println(names[3]);
		System.out.println();
		
		for(int i = 0; i<names.length; i++) {
			System.out.println(names[i]);
		}
		//int 10개를 저장할 수 있는 배열을 만들고
		//for문을 이용해서 1,2,3,4,5,6,7,8,9,10을
		//각 인덱스변수에 저장 후 출력하기
		int[] arr = new int[10];
		for(int i = 0; i<arr.length; i++) {
			arr[i]=i+1;
		}
		for(int i = 0; i<arr.length; i++) {
			System.out.println(arr[i]);
		}
		//선언과 동시에 초기화(값을 대입함)
		//String[] hobby = new String[10];
		String[] hobby = {"메이플", "코딩하기","자전거여행","피아노치기"};
		int[] ages = {1,2,3,4,5};
		
		for(int i = 0; i<hobby.length; i++) {
			System.out.println(hobby[i]);
		
		}
		//응용하기
//		Scanner sc = new Scanner(System.in);
//		System.out.print("이름을 입력 해주세요 : ");
//		String name1 = sc.nextLine();
		names = new String[] {"유인나", "말왕", "빡빢이", "장범준", "유새로이", "주지훈"};
		names[3] = "유지훈";
 		boolean flag = false;
		for(int i = 0; i<6; i++) {
			System.out.println(names[i]);
			if(names[i].equals("유지훈")) {
				flag=true;
			}
		}
		//배열 5개를 선언하고
		//취미를 입력받아 저장하는 로직
		Scanner sc = new Scanner(System.in);
		String[] hobby1 = new String[5]; //갯수를 무조건 지정
		System.out.println("취미 5개 입력 : "); 
		for(int i = 0; i<5; i++) { 
		System.out.println(i+1+"번 취미"); //취미입력 5번 반복한다.
		hobby1[i] = sc.nextLine(); //입력받는 값을 hobby에 저장한다.
		}
		for(int i = 0; i<5; i++) { //hobby 배열에 저장된 값들을 for문을 사용해서 0~4 값들을 출력해준다. 
			System.out.println(hobby1[i]); //출력
		}
		//입력받아 구성한 hobby 배열에서 입력받은 취미가 있는지 확인하는 것

		System.out.println("찾는 취미 : ");
		String searchHobby = sc.nextLine();
		boolean f = false;
		for(int i = 0; i < 5; i++) {
				System.out.println(hobby1[i]);
				if(hobby1[i].equals(searchHobby)) {
					f=true;
					break;
				}
		}
		System.out.println(f?"있다":"없다");
		//배열의 길이는 배열명.length로 확인이 가능.
	}
	public void changeData() {
		//배열에 저장되어 있는 값을 변경
		int[] num = {1,5,3,6,8,9};
		for(int i = 0; i<num.length; i++) {
			System.out.print(num[i]+ " ");
		}
		System.out.println();
		int temp = num[4];
		num[4] = num[1];
//		num[1] = num[4];
		num[1]=temp;
		for(int i = 0; i<num.length; i++) {
			System.out.print(num[i]+ " ");
		}
		
		int[] nums = {78,3,5,2,6,9,12,4,7};
		
		//정렬을 할 수 있음 -> 배열자료형은 순서가 있음
		//정렬 오름차순, 내림차순정렬
		//오름차순정렬하기
		for(int i =0; i<nums.length; i++) {
			System.out.println(nums[i]);
			for(int j=0; j<i; j++) {
				System.out.print(nums[j]+" ");	
				if(nums[i]<nums[j]) {
					int t = nums[i];
					nums[i] = nums[j];
					nums[j] = t;
				}
			}
			System.out.println();
		}
		for(int i = 0; i<nums.length; i++) {
			System.out.print(nums[i]+ " ");
		}
		System.out.println();
	 }
	public void radnom() {
		//임의 수 출력하기
		// 두 가지 방법 
		//1.Math객체를 이용하는 방법 -> random()
		//2.Random객체를 이용하는 방법 -> nextInt()
		
		System.out.println((int)(Math.random()*10));//0.00~9.000 랜덤값
		System.out.println((int)(Math.random()*10)+1);//1~9 랜덤값
		System.out.println((int)(Math.random()*45)+1);//1~45까지
		
		System.out.println(new Random().nextInt());//Int가 구현할 수 있는 범위안에서 랜덤하게 출력
		System.out.println(new Random().nextInt(10));//0~9		
		
		int[] lotto = new int[6];
		for(int i=0; i<lotto.length;i++) {
			lotto[i] = (int)(Math.random()*45)+1;
		}
		for(int i = 0; i<lotto.length; i++) {
			System.out.print(lotto[i]+" ");
		}
	}
	public void arrayCopy() {
		//배열을 복사하는 방법 2가지
		
		//1. 얕은 복사 : 배열의 주소값만 복사를 하는 것 -> 저장소를 공유
		//매소드의 매개변수에 값을 넣을때 주소를 넣으면 얕은복사랑 동일함.
		int[] arr = {1,2,3,4,15 };
		int[] arr2 = arr;  //얕은 복사
		System.out.println(arr);
		System.out.println(arr2);
		System.out.println(arr[0]);
		System.out.println(arr2[0]);
		//복사된 배열의 값을 수정하면??
		arr[0] = 100;  //배열의값은 heap 참조를 복사하기때문에 똑같은 주소를 사용하기 때문에
		//arr[0]의 값을 복사한 모든 값들은 arr[0]의 값을 똑같이 출력한다.
		System.out.println("arr[0] : "+arr[0]);
		System.out.println("arr2[0] : "+arr2[0]);
		
		
		
		//2. 깊은 복사 : 
		int[] arr3 = new int[arr.length];  //new을 사용하므로서 heap영역에 새로운 객체가 생성된다
											//so, 주소값이 다르다.  /원본값유지/
		for(int i = 0; i<arr.length; i++) {
			arr3[i] = arr[i];
		}
		
		System.out.println("arr[0]" +arr[0]);
		System.out.println("arr3[0]" +arr3[0]);
		arr3[0] = 7;
		System.out.println("arr[0] " + arr[0]);
		System.out.println("arr3[0] "+ arr3[0]);
		System.out.println(arr);
		System.out.println(arr3);
		//배열복사 기능을 하는 메소드
		//1. 복사할 대상(배열)
		//2. 복사할 대상의 시작 인덱스
		//3. 복사될 위치(target 배열)
		//4. 복사될 배열의 시작 위치
		//5. 복사될 값의 갯수 *배열의 크기 유의*
		int[] arr4 = new int[arr.length];
		System.arraycopy(arr, 0, arr4, 1, 3);  //ctrl + c // ctrl + v
		for(int i = 0; i<arr4.length; i++) {
			System.out.println(arr4[i]);
		}
	}
  }



//if(name1.equals(names[0])) {
//	System.out.println("있습니다");
//}else if(name1.equals(names[1])) {
//	System.out.println("있습니다");
//}else if(name1.equals(names[2])) {
//	System.out.println("있습니다");
//}else if(name1.equals(names[3])) {
//	System.out.println("있습니다");
//}else if(name1.equals(names[4])) {
//	System.out.println("있습니다");
//}else if(name1.equals(names[5])) {
//	System.out.println("있습니다");
//}else {
//	System.out.println("없습니다.");
//}

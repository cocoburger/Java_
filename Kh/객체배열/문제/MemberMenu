package objectarray.member.model.view;

import java.util.Scanner;


import objectarray.controller.MemberController;
import objectarray.member.model.vo.Member;

public class MemberMenu {

	
	
	public MemberMenu() { //기본생성자
		
	}
	
	Scanner sc = new Scanner(System.in); // 입력
	MemberController  mc = new MemberController(); //멤버컨트롤러 객체 생성해야 매소드 활용가능
	
	
	//최대 등록 가능한 회원 수는 10명입니다. 현재 등록된 회원 수는 0명입니다.
	// MemberController(mc)클래스 안에 있는 멤버필드를 이용하여
	// 최대 등록 가능한 회원 수가 몇 명인지 출력
	// 또한 현재 등록된 회원 수는 mc에 existMemberNum()의 반환 값으로
	// 몇 명이 등록되어 있는지 출력
	
	
	public void mainMenu() {
		do {
		System.out.println("최대 등록 가능한 회원 수는 " + mc.SIZE +"명입니다 ");
		System.out.println("현재 등록된 회원 수는" +mc.existMemberNum()+"입니다.");
		System.out.println();
		if(mc.existMemberNum() != 10) { //회원수가 10명이 안니기 때문에 모든 목록을 볼 수있다.
				System.out.println("1. 새 회원 등록");
				System.out.println("2. 회원 검색");
				System.out.println("3. 회원 정보 수정");
				System.out.println("4. 회원 삭제");
				System.out.println("5. 모두 출력");
				System.out.println("9. 끝내기");
				System.out.print("메뉴 번호 : ");
				int cho = sc.nextInt();
				switch(cho) {
					case 1 : insertMember();break;
					case 2 : searchMember();break;
					case 3 : updateMember();break;
					case 4 : deleteMember();break;
					case 5 : printAll();break;
					case 9 : System.out.println("프로그램을 종료합니다.");return;
					default : System.out.println("잘못 입력하셨습니다. 다시 입력해주세요");return;
				}
			}else {
				System.out.println("회원 수가 꽉 찼기 때문에 일부 메뉴만 오픈합니다.");
				System.out.println("2. 회원 검색");
				System.out.println("3. 회원 정보 수정");
				System.out.println("4. 회원 삭제");
				System.out.println("5. 모두 출력");
				System.out.println("9. 끝내기");
				System.out.print("메뉴 번호 : ");
				int cho = sc.nextInt();
				switch(cho) {
				case 2 : searchMember();break;
				case 3 : updateMember();break;
				case 4 : deleteMember();break;
				case 5 : printAll();break;
				case 9 : System.out.println("프로그램을 종료합니다.");return;
				default : System.out.println("잘못 입력하셨습니다. 다시 입력해주세요");return;
				}
			}
		}while(true);
	}	
	
	
	// 중복되지 않도록 mc의 checkId()메소드를 통해서 중복 검사를 함
	// 중복 검사를 한 결과 값에 따라 중복 값이 없으면 다음으로 넘어가고
	// 있으면 “중복된 아이디입니다. 다시 입력해주세요.”라는 문구를 출력 후
	// 다시 아이디를 받도록 함
	
	public void insertMember() {
		sc.nextLine();
		String id;
		while(true) { //중복되는 아이디가 계속 입력 될 수 있으므로 while문을 사용
			System.out.print("아이디 : ");
			id = sc.nextLine();
			if(mc.checkId(id) == false  ) { //false = 중복되는 id가 없다는 뜻.
				break;
			}else { //false가아니면 true이기때문에 중복되는 id가 있으므로 반복 진행.
				System.out.println("중복된 아이디 입니다.");
			}
		}
		System.out.print("이름 : ");
		String name = sc.nextLine();
		System.out.print("비밀번호 : ");
		String password = sc.nextLine();
		System.out.print("이메일 : ");
		String email = sc.nextLine();
		
		// 성별의 경우 M이나 m, F나 f가 아니면 “성별을 다시 입력하세요.”를
		// 출력 후 다시 성별을 입력하도록 함
		char gender;
		while(true) {
			System.out.print("성별(M/F) : ");
			gender = sc.next().charAt(0);
			if(gender == 'm' || gender == 'M'  || gender == 'f' || gender == 'F') {
				break;
			}else {
				System.out.println("성별을 다시 입력하세요.");
			}
		}
		System.out.print("나이 : ");
		int age = sc.nextInt();
		sc.nextLine();
		// 아이디부터 나이까지 모든 데이터를 받았으면
		// mc의 insertMember메소드의 매개변수로 넘김
		mc.insertMember(id, name, password, email, gender, age); //id와 gender는 반복문안에서만 유효하다.while문 밖에다가 변수설정해야한다.
		
	}
	
	
	public void searchMember() {
		System.out.println("1.아이디로 검색하기");
		System.out.println("2.이름으로 검색하기");
		System.out.println("3.이메일로 검색하기");
		System.out.println("9.메인으로 돌아가기");
		System.out.print("메뉴 번호");
		int cho = sc.nextInt();
		switch(cho) {
		case 1 : searchId(); break;
		case 2 : searchName(); break;
		case 3 : searchEmail(); break;
		case 9 : System.out.println("메인으로 돌아갑니다."); return;
		default : System.out.println("잘못 입력하셨습니다."); return;
		}
		
	}
	
	public void searchId() {
		sc.nextLine();
		System.out.print("검색할 아이디 : ");
		String id = sc.nextLine();
		if(mc.searchId(id) == null) {
			System.out.println("검색 결과가 없습니다."); //return값이 null이면 찾는 id가 검색 결과에 없다는 걸 말한다.

		}else { //null값이 아니면 i.inform();메소드를 호출하는 거기 때문에 id를 출력한다
			System.out.println("찾으신 회원 조회 결과입니다.");
			System.out.println(mc.searchId(id)); //리턴값을 return i.inform();으로 해주기때문에 mc.searchId(id)이렇게 매개변수만 작성
		}
	}
	
	// 검색할 이름을 사용자에게 입력 받고 입력 받은 데이터를
	// mc의 searchName() 메소드의 매개변수로 넘김, 반환 값에 따라
	// 검색 결과 없으면 “검색 결과가 없습니다.” 출력 후 mainMenu()로 돌아감
	// 검색 결과가 있으면 “찾으신 회원 조회 결과입니다.” 출력 후
	// 회원 검색 결과 출력
	public void searchName() {
		sc.nextLine();
		System.out.print("이름 검색 : ");
		String name = sc.nextLine();
		if(mc.searchName(name) == null) { 
			System.out.println("찾으신 결과가 없습니다."); //searchName(String name) ->  null이면 검색결과 저장된 데이터와 일치한 게 없다는 뜻. 
		}else {
			System.out.println("찾으신 회원 조회 결과입니다.");
			System.out.println(mc.searchName(name).inform()); //리턴값 그냥 i(m)이기 때문에 inform()메소드를 호출해야한다.
		}
	}
	
	public void searchEmail() {
		sc.nextLine();
		System.out.print("이메일 검색 : ");
		String email = sc.nextLine();
		if(mc.searchEmail(email) == null) { //searchEmail(String email) -> null이면 검색결과 저장된 데이터와 일치한 게 없다는 뜻.
			System.out.println("찾으신 결과가 없습니다.");
		}else {
			System.out.println("찾으신 회원 조회 결과입니다.");
			System.out.println(mc.searchEmail(email).inform());//리턴값 그냥 i(m)이기 때문에 inform()메소드를 호출해야한다.
		}
	}
	
	
	// 메뉴 번호에 따라 각 메소드로 이동되며 9번을 입력했을 경우
	// “메인으로 돌아갑니다.” 출력 후 mainMenu()로 돌아감
	// 메뉴 번호를 잘못 입력했을 경우 “잘못 입력하셨습니다.” 출력 후
	// mainMenu()로 돌아감
	public void updateMember() {
		System.out.println("1.비밀번호 수정");
		System.out.println("2.이름 수정하기");
		System.out.println("3.이메일 수정하기");
		System.out.println("9.메인으로 돌아가기");
		System.out.println("메뉴 번호 : ");
		int cho = sc.nextInt();
		switch(cho) {
		case 1 : updatePassword();break;
		case 2 : updateName();break;
		case 3 : updateEmail();break;
		case 9 : System.out.println("메인으로 돌아갑니다.");return;
		default : System.out.println("잘못 입력하셨습니다.");return;
		}
	}
	
	// 수정할 회원 id와 비밀번호를 사용자에게 입력 받고 입력 받은 데이터를
	// mc의 updatePassword() 메소드의 매개변수로 넘김, 반환 값에 따라
	// 검색결과 없으면 “존재하지 않는 아이디입니다.” 출력, mainMenu()로 감
	// 검색 결과가 있으면 “수정이 성공적으로 되었습니다.” 출력 후
	// mainMenu()로 돌아감
	public void updatePassword() {
		sc.nextLine();
		System.out.print("수정 할 아이디 : ");
		String id = sc.nextLine();
		System.out.print("수정 할 비밀번호  : ");
		String password = sc.nextLine();
		if(mc.updatePassword(id, password) == true) { //updatePassword(String id, String password) -> true이면  수정 성공
			System.out.println("수정이 성공적으로 되었습니다.");
		}else {
			System.out.println("존재하지 않는 아이디입니다.");
		}
	}
	
	// 수정할 회원 id와 이름을 사용자에게 입력 받고 입력 받은 데이터를
	// mc의 updateName() 메소드의 매개변수로 넘김, 반환 값에 따라
	// 검색결과 없으면 “존재하지 않는 아이디입니다.” 출력, mainMenu()로 감
	// 검색 결과가 있으면 “수정이 성공적으로 되었습니다.” 출력 후
	// mainMenu()로 돌아감
	public void updateName() {
		sc.nextLine();
		System.out.print("수정 할 아이디 : ");
		String id = sc.nextLine();
		System.out.print("수정 할 이름 : ");
		String name = sc.nextLine();
		if(mc.updateName(id, name) == true) { //updateName(String id, String name)이게 true라면 수정이 성공적으로 되었다는 뜻. 
			System.out.println("수정이 성공적으로 되었습니다.");
		}else {
			System.out.println("존재하지 않는 아이디입니다.");
		}
	}
	
	
	// 수정할 회원 id와 이메일을 사용자에게 입력 받고 입력 받은 데이터를
	// mc의 updateEmail() 메소드의 매개변수로 넘김, 반환 값에 따라
	// 검색결과 없으면 “존재하지 않는 아이디입니다.” 출력, mainMenu()로 감
	// 검색 결과가 있으면 “수정이 성공적으로 되었습니다.” 출력 후
	// mainMenu()로 돌아감
	
	public void updateEmail() {
		sc.nextLine();
		System.out.print("수정 할 아이디 : ");
		String id = sc.nextLine();
		System.out.print("수정 할 이메일 : ");
		String email = sc.nextLine();
		if(mc.updateEmail(id, email) == true) { //updateEmail(String id, String email) -> true이면 수정한 이메일로 업데이트가 되었다는 뜻이다.
			System.out.println("수정이 성공적으로 되었습니다.");
		}else { //리턴값이 false이므로 존재하지 않는 아이디이다.
			System.out.println("존재하지 않는 아이디입니다.");
		}
		
	}
	public void deleteMember() {
		System.out.println("1.특정 회원 삭제하기");
		System.out.println("2.전체 회원 삭제하기");
		System.out.println("9.메인으로 돌아가기");
		System.out.print("메뉴 번호 : ");
		int cho = sc.nextInt();
		switch(cho) {
		case 1 : deleteOne();break;
		case 2 : deleteAll();break;
		case 9 : System.out.println("메인으로 돌아갑니다.");return;
		default : System.out.println("잘못 입력하셨습니다.");return;
		}
	}
	
	// 삭제할 회원 id를 사용자에게 입력 받고 정말 삭제할 것인지 사용자에게
	// 물어본 뒤, Y나 y를 사용자가 입력할 경우 입력 받은 id를
	// mc의 delete() 메소드의 매개변수로 넘김, 반환 값에 따라
	// 검색결과 없으면 “존재하지 않는 아이디입니다.” 출력, mainMenu()로 감
	// 검색 결과가 있으면 “성공적으로 삭제하였습니다.” 출력 후
	// mainMenu()로 돌아감
	
	//삭제할 id를 입력받고 y/Y이면 삭제한다. 
	public void deleteOne() {
		sc.nextLine();
		System.out.print("삭제할 id : "); 
		String id = sc.nextLine();
		System.out.print("정말 삭제하시겠습니까?(Y/N)");
		char cho = sc.next().charAt(0); 
		if(cho == 'y'|| cho == 'Y') { 
			if(mc.delete(id) == true) { //delete(String id) ->  return이 true면 삭제하고자할 id의 모든 정보가 null로 초기화되었다는 것을 의미한다.
				System.out.println("성공적으로 삭제하였습니다.");
			}else {
				System.out.println("존재하지 않는 아이디입니다.");
			}
		}else {
			System.out.println("메인으로 돌아갑니다.");
		}
	}
	
	// 정말 삭제할 것인지 사용자에게 물어본 뒤, Y나 y를 사용자가 입력할 경우
	// mc의 delete() 메소드 호출, “성공적으로 삭제하였습니다.” 출력 후
	// mainMenu()로 돌아감
	public void deleteAll() {
		 while(true) {
			 System.out.print("정말 전체 삭제하시겠습니까?(Y/N)");
				char cho = sc.next().charAt(0);
				if(cho == 'y' || cho == 'Y') {
					mc.delete();
					System.out.println("성공적으로 삭제되었습니다.");
					break;
			}else if(cho == 'n' || cho == 'N') {
				System.out.println("메인으로 돌아갑니다.");
			}else {
				System.out.println("잘못 입력하셨습니다. 다시 입력해주세요.");
			}
		 }		
	  }
		
	//전체회원 출력 메소드
	// mc의 printAll() 메소드의 반환 값을 가지고 저장된 회원을 출력하는데
	// 저장된 회원의 수가 0명이면 “저장된 회원이 없습니다.” 출력,
	// 0명이 아니면 저장된 모든 회원의 정보 출력
	public void printAll() {
		if(mc.existMemberNum() == 0) { //등록된 회원이 없기때문에 아래문구 출력
			System.out.println("저장된 회원이 없습니다.");
		}else if(mc.existMemberNum() != 0) { //0이 아니면 m을 리턴해준다. m은 회원정보가 저장되어있는 객체 배열
			System.out.println("=================== 전체 회원 목록 ====================");
			for(Member i : mc.printAll()) { // i가 null값이 아니면 Member의 inform메소드를 호출하여 회원목록을 보여준다.
				if(i != null) {
					System.out.println(i.inform());
				}
				
			}
		}
	}
}
